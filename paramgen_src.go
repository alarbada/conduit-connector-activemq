// Code generated by paramgen. DO NOT EDIT.
// Source: github.com/ConduitIO/conduit-connector-sdk/tree/main/cmd/paramgen

package activemq

import (
	sdk "github.com/conduitio/conduit-connector-sdk"
)

func (SourceConfig) Parameters() map[string]sdk.Parameter {
	return map[string]sdk.Parameter{
		"activemq.dispatchAsync": {
			Default:     "",
			Description: "activemq.dispatchAsync specifies whether messages should be dispatched synchronously or asynchronously from the producer thread for non-durable topics in the broker. Maps to the activemq.dispatchAsync header.",
			Type:        sdk.ParameterTypeBool,
			Validations: []sdk.Validation{},
		},
		"activemq.exclusive": {
			Default:     "",
			Description: "activemq.exclusive indicates the desire to be the sole consumer from the queue. Maps to the activemq.exclusive header.",
			Type:        sdk.ParameterTypeBool,
			Validations: []sdk.Validation{},
		},
		"activemq.maximumPendingMessageLimit": {
			Default:     "",
			Description: "activemq.maximumPendingMessageLimit specifies the upper limit of pending messages allowed for slow consumers on non-durable topics. When this limit is reached, older messages will be discarded to handle slow consumer backlog. Maps to the activemq.maximumPendingMessageLimit header.",
			Type:        sdk.ParameterTypeInt,
			Validations: []sdk.Validation{},
		},
		"activemq.noLocal": {
			Default:     "",
			Description: "activemq.noLocal indicates if messages sent from the local connection should be excluded from subscriptions. When set to true, locally sent messages will be ignored. Maps to the activemq.noLocal header.",
			Type:        sdk.ParameterTypeBool,
			Validations: []sdk.Validation{},
		},
		"activemq.prefetchSize": {
			Default:     "",
			Description: "activemq.prefetchSize determines the maximum number of messages to dispatch to the client before it acknowledges a message. No further messages are dispatched once this limit is hit. For fair message distribution across consumers, consider setting this to a value greater than 1. Maps to the activemq.prefetchSize header.",
			Type:        sdk.ParameterTypeInt,
			Validations: []sdk.Validation{},
		},
		"activemq.priority": {
			Default:     "",
			Description: "activemq.priority specifies the consumer's priority level for weighted dispatching order. Maps to the activemq.priority header.",
			Type:        sdk.ParameterTypeString,
			Validations: []sdk.Validation{},
		},
		"activemq.retroactive": {
			Default:     "",
			Description: "activemq.retroactive, if set to true, makes the subscription retroactive for non-durable topics. Maps to the activemq.retroactive header.",
			Type:        sdk.ParameterTypeBool,
			Validations: []sdk.Validation{},
		},
		"activemq.subscriptionName": {
			Default:     "",
			Description: "activemq.subscriptionName specifies the name used for durable topic subscriptions. Prior to ActiveMQ version 5.7.0, both clientID on the connection and subscriptionName  on the subscribe operation must match. Maps to the activemq.subscriptionName header.",
			Type:        sdk.ParameterTypeString,
			Validations: []sdk.Validation{},
		},
		"clientID": {
			Default:     "",
			Description: "clientID specifies the JMS clientID which is used in combination with the activemq.subcriptionName to denote a durable subscriber. Maps to the client-id header.",
			Type:        sdk.ParameterTypeString,
			Validations: []sdk.Validation{},
		},
		"password": {
			Default:     "",
			Description: "password is the password to use when connecting to the broker.",
			Type:        sdk.ParameterTypeString,
			Validations: []sdk.Validation{
				sdk.ValidationRequired{},
			},
		},
		"queue": {
			Default:     "",
			Description: "queue is the name of the queue to write to.",
			Type:        sdk.ParameterTypeString,
			Validations: []sdk.Validation{
				sdk.ValidationRequired{},
			},
		},
		"recvTimeoutHeartbeat": {
			Default:     "2s",
			Description: "recvTimeoutHeartbeat specifies the minimum amount of time between the client expecting to receive heartbeat notifications from the server",
			Type:        sdk.ParameterTypeDuration,
			Validations: []sdk.Validation{},
		},
		"selector": {
			Default:     "",
			Description: "selector defines a JMS selector employing SQL 92 syntax as delineated in the JMS 1.1 specification, enabling a filter to be applied on each message associated with the subscription. Maps to the selector header.",
			Type:        sdk.ParameterTypeString,
			Validations: []sdk.Validation{},
		},
		"sendTimeoutHeartbeat": {
			Default:     "2s",
			Description: "sendTimeoutHeartbeat specifies the maximum amount of time between the client sending heartbeat notifications to the server",
			Type:        sdk.ParameterTypeDuration,
			Validations: []sdk.Validation{},
		},
		"tls.caCertPath": {
			Default:     "",
			Description: "caCertPath is the path to the CA certificate file.",
			Type:        sdk.ParameterTypeString,
			Validations: []sdk.Validation{},
		},
		"tls.clientCertPath": {
			Default:     "",
			Description: "clientCertPath is the path to the client certificate file.",
			Type:        sdk.ParameterTypeString,
			Validations: []sdk.Validation{},
		},
		"tls.clientKeyPath": {
			Default:     "",
			Description: "clientKeyPath is the path to the client key file.",
			Type:        sdk.ParameterTypeString,
			Validations: []sdk.Validation{},
		},
		"tls.enabled": {
			Default:     "false",
			Description: "enabled is a flag to enable or disable TLS.",
			Type:        sdk.ParameterTypeBool,
			Validations: []sdk.Validation{},
		},
		"tls.insecureSkipVerify": {
			Default:     "false",
			Description: "insecureSkipVerify is a flag to skip verification of the server's certificate chain and host name.",
			Type:        sdk.ParameterTypeBool,
			Validations: []sdk.Validation{},
		},
		"url": {
			Default:     "",
			Description: "url is the url of the ActiveMQ classic broker.",
			Type:        sdk.ParameterTypeString,
			Validations: []sdk.Validation{
				sdk.ValidationRequired{},
			},
		},
		"user": {
			Default:     "",
			Description: "user is the username to use when connecting to the broker.",
			Type:        sdk.ParameterTypeString,
			Validations: []sdk.Validation{
				sdk.ValidationRequired{},
			},
		},
	}
}
