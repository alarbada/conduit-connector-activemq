// Code generated by paramgen. DO NOT EDIT.
// Source: github.com/ConduitIO/conduit-commons/tree/main/paramgen

package activemq

import (
	"github.com/conduitio/conduit-commons/config"
)

const (
	SourceConfigActivemqDispatchAsync              = "activemq.dispatchAsync"
	SourceConfigActivemqExclusive                  = "activemq.exclusive"
	SourceConfigActivemqMaximumPendingMessageLimit = "activemq.maximumPendingMessageLimit"
	SourceConfigActivemqNoLocal                    = "activemq.noLocal"
	SourceConfigActivemqPrefetchSize               = "activemq.prefetchSize"
	SourceConfigActivemqPriority                   = "activemq.priority"
	SourceConfigActivemqRetroactive                = "activemq.retroactive"
	SourceConfigActivemqSubscriptionName           = "activemq.subscriptionName"
	SourceConfigClientID                           = "clientID"
	SourceConfigPassword                           = "password"
	SourceConfigQueue                              = "queue"
	SourceConfigRecvTimeoutHeartbeat               = "recvTimeoutHeartbeat"
	SourceConfigSelector                           = "selector"
	SourceConfigSendTimeoutHeartbeat               = "sendTimeoutHeartbeat"
	SourceConfigTlsCaCertPath                      = "tls.caCertPath"
	SourceConfigTlsClientCertPath                  = "tls.clientCertPath"
	SourceConfigTlsClientKeyPath                   = "tls.clientKeyPath"
	SourceConfigTlsEnabled                         = "tls.enabled"
	SourceConfigTlsInsecureSkipVerify              = "tls.insecureSkipVerify"
	SourceConfigUrl                                = "url"
	SourceConfigUser                               = "user"
)

func (SourceConfig) Parameters() map[string]config.Parameter {
	return map[string]config.Parameter{
		SourceConfigActivemqDispatchAsync: {
			Default:     "",
			Description: "DispatchAsync specifies whether messages should be dispatched\nsynchronously or asynchronously from the producer thread for non-durable\ntopics in the broker.\nMaps to the activemq.dispatchAsync header.",
			Type:        config.ParameterTypeBool,
			Validations: []config.Validation{},
		},
		SourceConfigActivemqExclusive: {
			Default:     "",
			Description: "Exclusive indicates the desire to be the sole consumer from the queue.\nMaps to the activemq.exclusive header.",
			Type:        config.ParameterTypeBool,
			Validations: []config.Validation{},
		},
		SourceConfigActivemqMaximumPendingMessageLimit: {
			Default:     "",
			Description: "MaxPendingMessageLimit specifies the upper limit of pending messages\nallowed for slow consumers on non-durable topics. When this limit is\nreached, older messages will be discarded to handle slow consumer\nbacklog.\nMaps to the activemq.maximumPendingMessageLimit header.",
			Type:        config.ParameterTypeInt,
			Validations: []config.Validation{},
		},
		SourceConfigActivemqNoLocal: {
			Default:     "",
			Description: "NoLocal indicates if messages sent from the local connection should be\nexcluded from subscriptions. When set to true, locally sent messages\nwill be ignored.\nMaps to the activemq.noLocal header.",
			Type:        config.ParameterTypeBool,
			Validations: []config.Validation{},
		},
		SourceConfigActivemqPrefetchSize: {
			Default:     "",
			Description: "PrefetchSize determines the maximum number of messages to dispatch to the client\nbefore it acknowledges a message. No further messages are dispatched once this\nlimit is hit. For fair message distribution across consumers, consider setting\nthis to a value greater than 1.\nMaps to the activemq.prefetchSize header.",
			Type:        config.ParameterTypeInt,
			Validations: []config.Validation{},
		},
		SourceConfigActivemqPriority: {
			Default:     "",
			Description: "Priority specifies the consumer's priority level for weighted dispatching order.\nMaps to the activemq.priority header.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		SourceConfigActivemqRetroactive: {
			Default:     "",
			Description: "Retroactive, if set to true, makes the subscription retroactive for non-durable topics.\nMaps to the activemq.retroactive header.",
			Type:        config.ParameterTypeBool,
			Validations: []config.Validation{},
		},
		SourceConfigActivemqSubscriptionName: {
			Default:     "",
			Description: "SubscriptionName specifies the name used for durable topic subscriptions.\nPrior to ActiveMQ version 5.7.0, both clientID on the connection and\nsubscriptionName  on the subscribe operation must match.\nMaps to the activemq.subscriptionName header.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		SourceConfigClientID: {
			Default:     "",
			Description: "ClientID specifies the JMS clientID which is used in combination with\nthe activemq.subcriptionName to denote a durable subscriber.\nMaps to the client-id header.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		SourceConfigPassword: {
			Default:     "",
			Description: "Password is the password to use when connecting to the broker.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
			},
		},
		SourceConfigQueue: {
			Default:     "",
			Description: "Queue is the name of the queue to write to.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
			},
		},
		SourceConfigRecvTimeoutHeartbeat: {
			Default:     "2s",
			Description: "RecvTimeoutHeartbeat specifies the minimum amount of time between the\nclient expecting to receive heartbeat notifications from the server",
			Type:        config.ParameterTypeDuration,
			Validations: []config.Validation{},
		},
		SourceConfigSelector: {
			Default:     "",
			Description: "Selector defines a JMS Selector employing SQL 92 syntax as delineated in\nthe JMS 1.1 specification, enabling a filter to be applied on each\nmessage associated with the subscription.\nMaps to the selector header.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		SourceConfigSendTimeoutHeartbeat: {
			Default:     "2s",
			Description: "SendTimeoutHeartbeat specifies the maximum amount of time between the\nclient sending heartbeat notifications to the server",
			Type:        config.ParameterTypeDuration,
			Validations: []config.Validation{},
		},
		SourceConfigTlsCaCertPath: {
			Default:     "",
			Description: "CaCertPath is the path to the CA certificate file.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		SourceConfigTlsClientCertPath: {
			Default:     "",
			Description: "ClientCertPath is the path to the client certificate file.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		SourceConfigTlsClientKeyPath: {
			Default:     "",
			Description: "ClientKeyPath is the path to the client key file.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		SourceConfigTlsEnabled: {
			Default:     "false",
			Description: "Enabled is a flag to enable or disable TLS.",
			Type:        config.ParameterTypeBool,
			Validations: []config.Validation{},
		},
		SourceConfigTlsInsecureSkipVerify: {
			Default:     "false",
			Description: "InsecureSkipVerify is a flag to skip verification of the server's\ncertificate chain and host name.",
			Type:        config.ParameterTypeBool,
			Validations: []config.Validation{},
		},
		SourceConfigUrl: {
			Default:     "",
			Description: "URL is the URL of the ActiveMQ classic broker.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
			},
		},
		SourceConfigUser: {
			Default:     "",
			Description: "User is the username to use when connecting to the broker.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
			},
		},
	}
}
