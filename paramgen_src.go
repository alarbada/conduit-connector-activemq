// Code generated by paramgen. DO NOT EDIT.
// Source: github.com/ConduitIO/conduit-connector-sdk/tree/main/cmd/paramgen

package activemq

import (
	sdk "github.com/conduitio/conduit-connector-sdk"
)

func (SourceConfig) Parameters() map[string]sdk.Parameter {
	return map[string]sdk.Parameter{
		"client_id": {
			Default:     "",
			Description: "client_id specifies the JMS clientID which is used in combination with the activemq.subcriptionName to denote a durable subscriber.",
			Type:        sdk.ParameterTypeString,
			Validations: []sdk.Validation{},
		},
		"dispatchAsync": {
			Default:     "",
			Description: "dispatchAsync specifies whether messages should be dispatched synchronously or asynchronously from the producer thread for non-durable topics in the broker.",
			Type:        sdk.ParameterTypeBool,
			Validations: []sdk.Validation{},
		},
		"exclusive": {
			Default:     "",
			Description: "exclusive indicates the desire to be the sole consumer from the queue.",
			Type:        sdk.ParameterTypeBool,
			Validations: []sdk.Validation{},
		},
		"maximumPendingMessageLimit": {
			Default:     "",
			Description: "maximumPendingMessageLimit specifies the upper limit of pending messages allowed for slow consumers on non-durable topics. When this limit is reached, older messages will be discarded to handle slow consumer backlog.",
			Type:        sdk.ParameterTypeInt,
			Validations: []sdk.Validation{},
		},
		"noLocal": {
			Default:     "",
			Description: "noLocal indicates if messages sent from the local connection should be excluded from subscriptions. When set to true, locally sent messages will be ignored.",
			Type:        sdk.ParameterTypeBool,
			Validations: []sdk.Validation{},
		},
		"password": {
			Default:     "",
			Description: "password is the password to use when connecting to the broker.",
			Type:        sdk.ParameterTypeString,
			Validations: []sdk.Validation{
				sdk.ValidationRequired{},
			},
		},
		"prefetchSize": {
			Default:     "",
			Description: "prefetchSize determines the maximum number of messages to dispatch to the client before it acknowledges a message. No further messages are dispatched once this limit is hit. For fair message distribution across consumers, consider setting this to a value greater than 1.",
			Type:        sdk.ParameterTypeInt,
			Validations: []sdk.Validation{},
		},
		"priority": {
			Default:     "",
			Description: "priority specifies the consumer's priority level for weighted dispatching order.",
			Type:        sdk.ParameterTypeString,
			Validations: []sdk.Validation{},
		},
		"queue": {
			Default:     "",
			Description: "queue is the name of the queue to write to.",
			Type:        sdk.ParameterTypeString,
			Validations: []sdk.Validation{
				sdk.ValidationRequired{},
			},
		},
		"recvTimeoutHeartbeat": {
			Default:     "2s",
			Description: "recvTimeoutHeartbeat specifies the minimum amount of time between the client expecting to receive heartbeat notifications from the server",
			Type:        sdk.ParameterTypeDuration,
			Validations: []sdk.Validation{},
		},
		"retroactive": {
			Default:     "",
			Description: "retroactive, if set to true, makes the subscription retroactive for non-durable topics.",
			Type:        sdk.ParameterTypeBool,
			Validations: []sdk.Validation{},
		},
		"selector": {
			Default:     "",
			Description: "selector defines a JMS selector employing SQL 92 syntax as delineated in the JMS 1.1 specification, enabling a filter to be applied on each message associated with the subscription.",
			Type:        sdk.ParameterTypeString,
			Validations: []sdk.Validation{},
		},
		"sendTimeoutHeartbeat": {
			Default:     "2s",
			Description: "sendTimeoutHeartbeat specifies the maximum amount of time between the client sending heartbeat notifications to the server",
			Type:        sdk.ParameterTypeDuration,
			Validations: []sdk.Validation{},
		},
		"subscriptionName": {
			Default:     "",
			Description: "subscriptionName specifies the name used for durable topic subscriptions. Prior to ActiveMQ version 5.7.0, both clientID on the connection and subscriptionName  on the subscribe operation must match.",
			Type:        sdk.ParameterTypeString,
			Validations: []sdk.Validation{},
		},
		"tls.caCertPath": {
			Default:     "",
			Description: "caCertPath is the path to the CA certificate file.",
			Type:        sdk.ParameterTypeString,
			Validations: []sdk.Validation{},
		},
		"tls.clientCertPath": {
			Default:     "",
			Description: "clientCertPath is the path to the client certificate file.",
			Type:        sdk.ParameterTypeString,
			Validations: []sdk.Validation{},
		},
		"tls.clientKeyPath": {
			Default:     "",
			Description: "clientKeyPath is the path to the client key file.",
			Type:        sdk.ParameterTypeString,
			Validations: []sdk.Validation{},
		},
		"tls.enabled": {
			Default:     "false",
			Description: "enabled is a flag to enable or disable TLS.",
			Type:        sdk.ParameterTypeBool,
			Validations: []sdk.Validation{},
		},
		"tls.insecureSkipVerify": {
			Default:     "false",
			Description: "insecureSkipVerify is a flag to skip verification of the server's certificate chain and host name.",
			Type:        sdk.ParameterTypeBool,
			Validations: []sdk.Validation{},
		},
		"url": {
			Default:     "",
			Description: "url is the url of the ActiveMQ classic broker.",
			Type:        sdk.ParameterTypeString,
			Validations: []sdk.Validation{
				sdk.ValidationRequired{},
			},
		},
		"user": {
			Default:     "",
			Description: "user is the username to use when connecting to the broker.",
			Type:        sdk.ParameterTypeString,
			Validations: []sdk.Validation{
				sdk.ValidationRequired{},
			},
		},
	}
}
